#include <iostream>
using namespace std;

// 배열을 전역으로 선언하면 기본값이 0으로 초기화 됩니다. 
// 하지만 지역변수는 0으로 초기화 된다는 보장이 없습니다. 
// 지역변수로 선언할 때 0으로 확실이 초기화 하고 싶으면 
// int cnt[50001]={0, } 이렇게 선언하면 됩니다.

// 지역변수로 선언하면 메모리의 스택영역에 할당됩니다. 
// 스택은 메모리가 작아 크기가 큰 배열을 선언하기에는 적당치 않습니다. 
// 전역변수는 메모리 데어터 역영에 할당되며, 
// 크기가 큰 배열을 선언해도 문제없이 할당이 됩니다. 
// 즉 문제풀이 코드에서는 10만 이상 크기의 배열은 전역으로 선언하는게 좋습니다.
int cnt[50001] = { 0 };

int main()
{
	int n=0;

	cin >> n;

	// 밑의 방식은 시간복잡도가 o(n^2)로 30000이상의 예시에서는 타임리밋 발생함

	//for (int i = 1; i <= n; i++)
	//{
	//	int cnt2 = 0;
	//	// 1 2 3 4 5 6 7 8
	//	for (int j = 1; j <= i; j++)
	//	{
	//		if (i % j == 0)
	//		{
	//			sum++;
	//			cnt2++;
	//		}
	//	}
	//	cout << cnt2 << ' ';
	//}
	//cout << endl;

	/* 8을 가지고 예시 전역변수로 0으로 초기화
	i=1~n
	i를 약수로 가지는 숫자들을 카운트하는 방식 -> i의 배수들
	j=i~n j=j+i(i의 배수로 증가)	
		1 2 3 4 5 6 7 8
	cnt 1 1 1 1 1 1 1 1
		1 2 1 2 1 2 1 2
		1 2 2 2 1 3 1 2
		1 2 2 3 1 3 1 3
		1 2 2 3 2 3 1 3
		1 2 2 3 2 4 1 3
		1 2 2 3 2 4 2 3
		1 2 2 3 2 4 2 4

	i가 1000일때 총 갯수가 30000이면 30바퀴만 돌면됨 -> 출력시간 감소
	nlogn정도는 아니지만 그와 근접하게 나옴
		*/	
	for (int i = 1; i <= n; i++) 
	{
		for (int j = i; j <= n; j =j+i)
			cnt[j]++; //j가 i의 배수이므로 j를 ++
	}
	for (int i = 1; i <= n; i++)
		printf("%d ", cnt[i]);

}
